Content-Security-Policy = 1#serialized-policy

serialized-policy =
    serialized-directive *( optional-ascii-whitespace ";" [ optional-ascii-whitespace serialized-directive ] )

serialized-directive
  = "child-src" required-ascii-whitespace serialized-source-list
  / "connect-src" required-ascii-whitespace serialized-source-list
  / "default-src" required-ascii-whitespace serialized-source-list
  / "font-src" required-ascii-whitespace serialized-source-list
  / "frame-src" required-ascii-whitespace serialized-source-list
  / "img-src" required-ascii-whitespace serialized-source-list
  / "manifest-src" required-ascii-whitespace serialized-source-list
  / "media-src" required-ascii-whitespace serialized-source-list
  / "object-src" required-ascii-whitespace serialized-source-list
  / "script-src" required-ascii-whitespace serialized-source-list
  / "script-src-attr" required-ascii-whitespace serialized-source-list
  / "style-src" required-ascii-whitespace serialized-source-list
  / "style-src-elem" required-ascii-whitespace serialized-source-list
  / "style-src-attr" required-ascii-whitespace serialized-source-list
  / "webrtc" required-ascii-whitespace ("'allow'" / "'block'")
  / "worker-src" required-ascii-whitespace serialized-source-list
  / "base-uri" required-ascii-whitespace serialized-source-list
  / "sandbox" required-ascii-whitespace ("" / token *( required-ascii-whitespace token ))
  / "form-action" required-ascii-whitespace serialized-source-list
  / "frame-ancestors" required-ascii-whitespace ancestor-source-list
  / "report-uri" required-ascii-whitespace URI-reference *( required-ascii-whitespace URI-reference )
  / "report-to" required-ascii-whitespace token
  / csp-directive-name [ required-ascii-whitespace csp-directive-value ]

csp-directive-name       = 1*( ALPHA / DIGIT / "-" )

csp-directive-value      = *( required-ascii-whitespace / ( %x21-2B / %x2D-3A / %x3C-7E ) )
                       ; Directive values may contain whitespace and VCHAR characters,
                       ; excluding ";" and ",". The second half of the definition
                       ; above represents all VCHAR characters (%x21-%x7E)
                       ; without ";" and "," (%x3B and %x2C respectively)

optional-ascii-whitespace = *( %x09 / %x0A / %x0C / %x0D / %x20 )

required-ascii-whitespace = 1*( %x09 / %x0A / %x0C / %x0D / %x20 )

serialized-source-list = ( source-expression *( required-ascii-whitespace source-expression ) ) / "'none'"

source-expression      = scheme-source / host-source / keyword-source
                         / nonce-source / hash-source

; Schemes: "https:" / "custom-scheme:" / "another.custom-scheme:"
scheme-source = scheme-part ":"

; Hosts: "example.com" / "*.example.com" / "https://*.example.com:12/path/to/file.js"
host-source = [ scheme-part "://" ] host-part [ ":" port-part ] [ path-part ]

scheme-part = scheme
              ; scheme is defined in section 3.1 of RFC 3986.

host-part   = "*" / [ "*." ] 1*host-char *( "." 1*host-char ) [ "." ]

host-char   = ALPHA / DIGIT / "-"

port-part   = 1*DIGIT / "*"

path-part   = path-absolute ; (but not including ";" or ",")
              ; path-absolute is defined in section 3.3 of RFC 3986.

; Keywords:
keyword-source = "'self'" / "'unsafe-inline'" / "'unsafe-eval'"
                 / "'strict-dynamic'" / "'unsafe-hashes'"
                 / "'report-sample'" / "'unsafe-allow-redirects'"
                 / "'wasm-unsafe-eval'"

; Nonces: 'nonce-[nonce goes here]'
nonce-source  = "'nonce-" base64-value "'"

base64-value  = 1*( ALPHA / DIGIT / "+" / "/" / "-" / "_" ) *2( "=" )

; Digests: 'sha256-[digest goes here]'
hash-source    = "'" hash-algorithm "-" base64-value "'"

hash-algorithm = "sha256" / "sha384" / "sha512"

ancestor-source-list = ( ancestor-source *( required-ascii-whitespace ancestor-source) ) / "'none'"
ancestor-source      = scheme-source / host-source / "'self'"

